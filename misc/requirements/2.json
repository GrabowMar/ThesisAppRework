{
  "id": 2,
  "name": "Authors and Books Manager",
  "description": "A web application to manage authors and their books with a one-to-many relationship",
  "backend_requirements": [
    "Implement SQLAlchemy models for Author (id, name, bio) and Book (id, title, published_year, author_id)",
    "Author can have multiple Books via one-to-many relationship with cascade delete",
    "Create POST /api/authors endpoint to add new authors with name and bio",
    "Create GET /api/authors endpoint to list all authors with their books nested in JSON",
    "Create GET /api/authors/<id> endpoint to get a specific author with all their books",
    "Create POST /api/books endpoint to add new books with title, published_year, and author_id",
    "Create GET /api/books endpoint to list all books",
    "Use proper HTTP status codes (200, 201, 400, 404) and JSON error responses",
    "Initialize database with db.create_all() in setup_app() function",
    "Include proper validation for all input fields and foreign key constraints"
  ],
  "frontend_requirements": [
    "Display a list of all authors with their books nested underneath each author",
    "Provide a form to add new authors with name and bio fields",
    "For each author, show a button/form to add a new book with title and published year",
    "Use axios to call backend API at http://backend:5000 for all endpoints",
    "Show loading states during all API operations with spinner or skeleton screens",
    "Display error messages when API calls fail with user-friendly text",
    "Use Bootstrap 5 for styling with cards for authors and nested lists for books",
    "Make the UI responsive and accessible with proper semantic HTML"
  ],
  "api_endpoints": [
    {
      "method": "POST",
      "path": "/api/authors",
      "description": "Create a new author",
      "request": {"name": "string (required)", "bio": "string (optional)"},
      "response": {"id": "integer", "name": "string", "bio": "string", "books": []}
    },
    {
      "method": "GET",
      "path": "/api/authors",
      "description": "Get all authors with their books",
      "response": [{"id": "integer", "name": "string", "bio": "string", "books": [{"id": "integer", "title": "string", "published_year": "integer"}]}]
    },
    {
      "method": "GET",
      "path": "/api/authors/<id>",
      "description": "Get a specific author with their books",
      "response": {"id": "integer", "name": "string", "bio": "string", "books": [{"id": "integer", "title": "string", "published_year": "integer"}]}
    },
    {
      "method": "POST",
      "path": "/api/books",
      "description": "Create a new book for an author",
      "request": {"title": "string (required)", "published_year": "integer (optional)", "author_id": "integer (required)"},
      "response": {"id": "integer", "title": "string", "published_year": "integer", "author_id": "integer"}
    }
  ],
  "control_endpoints": [
    {
      "path": "/health",
      "method": "GET",
      "expected_status": 200,
      "description": "Health check endpoint"
    }
  ]
}
