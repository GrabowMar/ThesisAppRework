/*
 * Generated by OpenRouter Code Generator
 * MAIN COMPONENT - Entry point for the application
 * HTML Compatibility Score: 0.38
 */

import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom/client';
import axios from 'axios';
import './App.css';

// Configure axios to handle credentials and base URL
axios.defaults.withCredentials = true;

const App = () => {
  // State management
  const [currentUser, setCurrentUser] = useState(null);
  const [currentView, setCurrentView] = useState('login');
  const [isLoading, setIsLoading] = useState(true);
  const [errors, setErrors] = useState({});
  const [formData, setFormData] = useState({
    register: { username: '', email: '', password: '', confirmPassword: '' },
    login: { email: '', password: '' }
  });

  // Check auth status on initial load
  useEffect(() => {
    const checkAuthStatus = async () => {
      try {
        setIsLoading(true);
        const response = await axios.get('/api/dashboard');
        setCurrentUser(response.data.user);
        setCurrentView('dashboard');
      } catch (error) {
        setCurrentView('login');
      } finally {
        setIsLoading(false);
      }
    };

    checkAuthStatus();
  }, []);

  // Handle form input changes
  const handleInputChange = (formType, field) => (e) => {
    setFormData({
      ...formData,
      [formType]: {
        ...formData[formType],
        [field]: e.target.value
      }
    });
    
    // Clear field-specific errors on change
    if (errors[formType]?.[field]) {
      setErrors({
        ...errors,
        [formType]: {
          ...errors[formType],
          [field]: null
        }
      });
    }
  };

  // Client-side validation
  const validateForm = (formType) => {
    const newErrors = {};
    const data = formData[formType];

    if (formType === 'register') {
      if (!data.username.trim()) newErrors.username = 'Username is required';
      if (!data.email.trim()) newErrors.email = 'Email is required';
      else if (!/\S+@\S+\.\S+/.test(data.email)) newErrors.email = 'Invalid email format';
      if (!data.password) newErrors.password = 'Password is required';
      else if (data.password.length < 6) newErrors.password = 'Password must be at least 6 characters';
      if (data.password !== data.confirmPassword) newErrors.confirmPassword = 'Passwords do not match';
    }

    if (formType === 'login') {
      if (!data.email.trim()) newErrors.email = 'Email is required';
      if (!data.password) newErrors.password = 'Password is required';
    }

    setErrors({
      ...errors,
      [formType]: newErrors
    });

    return Object.keys(newErrors).length === 0;
  };

  // Handle registration
  const handleRegister = async (e) => {
    e.preventDefault();
    if (!validateForm('register')) return;

    try {
      setIsLoading(true);
      await axios.post('/api/register', formData.register);
      setCurrentView('login');
      setErrors({});
    } catch (error) {
      setErrors({
        ...errors,
        register: {
          ...error.response?.data?.errors,
          general: error.response?.data?.message || 'Registration failed'
        }
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handle login
  const handleLogin = async (e) => {
    e.preventDefault();
    if (!validateForm('login')) return;

    try {
      setIsLoading(true);
      const response = await axios.post('/api/login', formData.login);
      setCurrentUser(response.data.user);
      setCurrentView('dashboard');
      setErrors({});
    } catch (error) {
      setErrors({
        ...errors,
        login: {
          ...error.response?.data?.errors,
          general: error.response?.data?.message || 'Login failed'
        }
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Handle logout
  const handleLogout = async () => {
    try {
      setIsLoading(true);
      await axios.post('/api/logout');
      setCurrentUser(null);
      setCurrentView('login');
    } catch (error) {
      setErrors({
        ...errors,
        dashboard: {
          general: 'Logout failed. Please try again.'
        }
      });
    } finally {
      setIsLoading(false);
    }
  };

  // Render login form
  const renderLoginForm = () => (
    <div className="auth-form">
      <h2>Login</h2>
      {errors.login?.general && <div className="error">{errors.login.general}</div>}
      <form onSubmit={handleLogin}>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            value={formData.login.email}
            onChange={handleInputChange('login', 'email')}
            className={errors.login?.email ? 'error-input' : ''}
          />
          {errors.login?.email && <div className="error">{errors.login.email}</div>}
        </div>
        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            value={formData.login.password}
            onChange={handleInputChange('login', 'password')}
            className={errors.login?.password ? 'error-input' : ''}
          />
          {errors.login?.password && <div className="error">{errors.login.password}</div>}
        </div>
        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Logging in...' : 'Login'}
        </button>
      </form>
      <p>
        Don't have an account?{' '}
        <button className="link-button" onClick={() => setCurrentView('register')}>
          Register
        </button>
      </p>
    </div>
  );

  // Render registration form
  const renderRegisterForm = () => (
    <div className="auth-form">
      <h2>Register</h2>
      {errors.register?.general && <div className="error">{errors.register.general}</div>}
      <form onSubmit={handleRegister}>
        <div className="form-group">
          <label>Username</label>
          <input
            type="text"
            value={formData.register.username}
            onChange={handleInputChange('register', 'username')}
            className={errors.register?.username ? 'error-input' : ''}
          />
          {errors.register?.username && <div className="error">{errors.register.username}</div>}
        </div>
        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            value={formData.register.email}
            onChange={handleInputChange('register', 'email')}
            className={errors.register?.email ? 'error-input' : ''}
          />
          {errors.register?.email && <div className="error">{errors.register.email}</div>}
        </div>
        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            value={formData.register.password}
            onChange={handleInputChange('register', 'password')}
            className={errors.register?.password ? 'error-input' : ''}
          />
          {errors.register?.password && <div className="error">{errors.register.password}</div>}
        </div>
        <div className="form-group">
          <label>Confirm Password</label>
          <input
            type="password"
            value={formData.register.confirmPassword}
            onChange={handleInputChange('register', 'confirmPassword')}
            className={errors.register?.confirmPassword ? 'error-input' : ''}
          />
          {errors.register?.confirmPassword && <div className="error">{errors.register.confirmPassword}</div>}
        </div>
        <button type="submit" disabled={isLoading}>
          {isLoading ? 'Registering...' : 'Register'}
        </button>
      </form>
      <p>
        Already have an account?{' '}
        <button className="link-button" onClick={() => setCurrentView('login')}>
          Login
        </button>
      </p>
    </div>
  );

  // Render dashboard
  const renderDashboard = () => (
    <div className="dashboard">
      <h2>Welcome, {currentUser?.username || 'User'}!</h2>
      <p>You're successfully authenticated</p>
      <button onClick={handleLogout} disabled={isLoading}>
        {isLoading ? 'Logging out...' : 'Logout'}
      </button>
      {errors.dashboard?.general && <div className="error">{errors.dashboard.general}</div>}
    </div>
  );

  // Main render logic
  return (
    <div className="container">
      {isLoading ? (
        <div className="loader">Loading...</div>
      ) : (
        <>
          {currentView === 'login' && renderLoginForm()}
          {currentView === 'register' && renderRegisterForm()}
          {currentView === 'dashboard' && renderDashboard()}
        </>
      )}
    </div>
  );
};

// Mount the application
const container = document.getElementById('root');
if (container) {
  const root = ReactDOM.createRoot(container);
  root.render(<App />);
}

export default App;