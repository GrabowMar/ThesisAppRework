/*
 * Generated by OpenRouter Code Generator
 * MAIN COMPONENT - Entry point for the application
 * HTML Compatibility Score: 0.38
 */

// 1. Imports
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './App.css';

// 2. Main App Component
const App = () => {
  // 1. State Management: Define state for the current user, the current view, loading status, and errors.
  const [user, setUser] = useState(null);
  const [view, setView] = useState('login');
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  // 2. Lifecycle Hooks: Use useEffect to check for an active session on initial application load.
  useEffect(() => {
    const checkSession = async () => {
      try {
        setLoading(true);
        const response = await axios.get('/api/dashboard');
        setUser(response.data.user);
        setView('dashboard');
      } catch (error) {
        setUser(null);
        setView('login');
      } finally {
        setLoading(false);
      }
    };

    checkSession();
  }, []);

  // 3. Event Handlers & API Calls: Define functions to handle form submissions (login, register) and user actions (logout).
  const handleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setErrors({});

    try {
      const response = await axios.post('/api/login', {
        email: e.target.email.value,
        password: e.target.password.value,
      });
      setUser(response.data.user);
      setView('dashboard');
    } catch (error) {
      setErrors(error.response.data.errors);
    } finally {
      setLoading(false);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    setLoading(true);
    setErrors({});

    try {
      const response = await axios.post('/api/register', {
        username: e.target.username.value,
        email: e.target.email.value,
        password: e.target.password.value,
      });
      setUser(response.data.user);
      setView('dashboard');
    } catch (error) {
      setErrors(error.response.data.errors);
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = async () => {
    try {
      await axios.post('/api/logout');
      setUser(null);
      setView('login');
    } catch (error) {
      console.error('Logout failed:', error);
    }
  };

  // 4. Render Logic: Conditionally render different components/views based on the application's state.
  const renderLogin = (
    <div className="auth-form">
      <h2>Login</h2>
      {errors.global && <div className="error">{errors.global}</div>}
      <form onSubmit={handleLogin}>
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input type="email" id="email" name="email" required />
          {errors.email && <div className="error">{errors.email}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input type="password" id="password" name="password" required />
          {errors.password && <div className="error">{errors.password}</div>}
        </div>
        <button type="submit" disabled={loading}>
          {loading ? 'Logging in...' : 'Login'}
        </button>
      </form>
      <p>
        Don't have an account? <button onClick={() => setView('register')}>Register</button>
      </p>
    </div>
  );

  const renderRegister = (
    <div className="auth-form">
      <h2>Register</h2>
      {errors.global && <div className="error">{errors.global}</div>}
      <form onSubmit={handleRegister}>
        <div className="form-group">
          <label htmlFor="username">Username</label>
          <input type="text" id="username" name="username" required />
          {errors.username && <div className="error">{errors.username}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="email">Email</label>
          <input type="email" id="email" name="email" required />
          {errors.email && <div className="error">{errors.email}</div>}
        </div>
        <div className="form-group">
          <label htmlFor="password">Password</label>
          <input type="password" id="password" name="password" required />
          {errors.password && <div className="error">{errors.password}</div>}
        </div>
        <button type="submit" disabled={loading}>
          {loading ? 'Registering...' : 'Register'}
        </button>
      </form>
      <p>
        Already have an account? <button onClick={() => setView('login')}>Login</button>
      </p>
    </div>
  );

  const renderDashboard = (
    <div className="dashboard">
      <h2>Welcome, {user.username}!</h2>
      <button onClick={handleLogout}>Logout</button>
    </div>
  );

  return (
    <div className="container">
      {view === 'login' && renderLogin}
      {view === 'register' && renderRegister}
      {view === 'dashboard' && renderDashboard}
    </div>
  );
};

// 5. Mounting Logic
export default App;