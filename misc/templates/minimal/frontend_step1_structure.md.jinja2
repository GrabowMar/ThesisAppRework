# Task: Build React UI for {{ name }}

{{ description }}

## Let's Think Step by Step

**Systematic Approach:**
1. Understand the API endpoints
2. Plan the component structure (all in one file!)
3. Design the state management
4. Implement the UI with React hooks

## API Endpoints Available

{% for endpoint in endpoints %}
- **{{ endpoint.method }} {{ endpoint.path }}** - {{ endpoint.description }}
{% endfor %}

## User Requirements

Create UI that allows users to:
{% for verify in verification %}
- {{ verify }}
{% endfor %}

## Technical Stack

- React 18 with hooks (useState, useEffect)
- Axios for API calls
- Vite build system
- CSS for styling

## EXAMPLE: Professional React Component

```jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function App() {
  const [items, setItems] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [formData, setFormData] = useState({ name: '', description: '' });

  const fetchItems = async () => {
    setLoading(true);
    try {
      const response = await axios.get('/api/items');
      setItems(response.data);
      setError('');
    } catch (err) {
      setError('Failed to load items');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchItems();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      await axios.post('/api/items', formData);
      setFormData({ name: '', description: '' });
      fetchItems();
    } catch (err) {
      setError('Failed to create item');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="app">
      <header className="app-header">
        <h1>Item Manager</h1>
      </header>

      {error && <div className="alert alert-error">{error}</div>}

      <div className="container">
        <form onSubmit={handleSubmit} className="form">
          <input
            type="text"
            value={formData.name}
            onChange={(e) => setFormData({...formData, name: e.target.value})}
            placeholder="Name"
            required
          />
          <textarea
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            placeholder="Description"
          />
          <button type="submit" disabled={loading}>
            {loading ? 'Adding...' : 'Add Item'}
          </button>
        </form>

        <div className="items-list">
          {items.map(item => (
            <div key={item.id} className="item-card">
              <h3>{item.name}</h3>
              <p>{item.description}</p>
              <span className="timestamp">{new Date(item.created_at).toLocaleString()}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default App;
```

```css
.app {
  min-height: 100vh;
  background: #f5f5f5;
}

.app-header {
  background: #2c3e50;
  color: white;
  padding: 1.5rem;
  text-align: center;
}

.container {
  max-width: 800px;
  margin: 2rem auto;
  padding: 0 1rem;
}

.form {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 2rem;
}

.form input, .form textarea {
  width: 100%;
  padding: 0.75rem;
  margin-bottom: 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.form button {
  width: 100%;
  padding: 0.75rem;
  background: #3498db;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.form button:hover {
  background: #2980b9;
}

.form button:disabled {
  background: #95a5a6;
  cursor: not-allowed;
}

.alert {
  padding: 1rem;
  margin: 1rem;
  border-radius: 4px;
}

.alert-error {
  background: #e74c3c;
  color: white;
}

.items-list {
  display: grid;
  gap: 1rem;
}

.item-card {
  background: white;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.item-card h3 {
  margin: 0 0 0.5rem 0;
  color: #2c3e50;
}

.item-card p {
  color: #7f8c8d;
  margin: 0 0 0.5rem 0;
}

.timestamp {
  font-size: 0.875rem;
  color: #95a5a6;
}
```

## Your Task

**Follow the example to build your React app.**

### Critical Requirements:

1. **Single File Implementation**
   - ALL code in App.jsx (NO separate components!)
   - ALL styles in App.css
   - NO external component imports

2. **React Patterns**
   - Use useState for state
   - Use useEffect for data fetching
   - Handle loading states
   - Handle error states

3. **API Integration**
   - Use relative paths (`/api/items`)
   - Use axios for HTTP
   - Handle errors gracefully

4. **Styling**
   - Responsive design
   - Modern look
   - Use unicode symbols for icons: ‚úì ‚úó ‚ü≥ üóëÔ∏è ‚ûï

## Deliverables

1. **src/App.jsx** (200-300 lines)
2. **src/App.css** (150-200 lines)

**DO NOT** generate:
- package.json (provided by build system)
- index.html (provided by build system)
- main.jsx (provided by build system)

## Checklist

- ‚úì All functionality in App.jsx only
- ‚úì Professional styling in App.css
- ‚úì Loading states
- ‚úì Error handling
- ‚úì Responsive design
- ‚úó NO separate component files
- ‚úó NO external imports (except React, axios)
