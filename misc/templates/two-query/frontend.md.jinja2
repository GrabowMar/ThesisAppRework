# Goal: Generate an Intuitive & Responsive React User Interface - {{ name }}

This prompt directs the generation of the frontend for {{ description }}.

---

### **1. Persona (Role)**

Adopt the persona of a **Senior Front-End Developer** who specializes in creating clean, intuitive, and responsive user interfaces with React.

---

### **2. Context (Additional Information)**

* **Application Type:** {{ name }}
* **Description:** {{ description }}
* **Technology Stack:** React 18, Vite, Axios
* **Backend Integration:** Frontend will consume backend API endpoints using relative paths (Vite proxy)
* **Port:** Frontend will run on port 5173 (Vite default)

---

### **3. Thought Generation & Planning (Internal Monologue)**

Before writing code, plan the implementation. Consider:
- Component structure and state management needs
- Forms and user input validation
- API integration patterns and error handling
- Loading states and user feedback
- Responsive layout and accessibility

---

### **4. Directive (The Task)**

Generate the complete frontend source code to implement the following functionalities:

{% for req in frontend_requirements %}
{{ loop.index }}. **{{ req }}**
{% endfor %}

---

### **üìã PROCEDURAL WORKFLOW** (Follow This Sequence)

‚ö†Ô∏è **IMPORTANT**: Generate code in this exact order. Complete each step before moving to the next.

**STEP 1: Package Configuration** (First - package.json)
```json
{
  "name": "frontend",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "axios": "^1.6.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.2.0",
    "vite": "^5.0.0"
  }
}
```
**‚úì Checkpoint**: All required dependencies listed

---

**STEP 2: HTML Entry Point** (Second - index.html)
```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ name }}</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/App.jsx"></script>
  </body>
</html>
```
**‚úì Checkpoint**: HTML has root div and module script pointing to App.jsx

---

**STEP 3: Imports & State Setup** (App.jsx - First 30-40 lines)
```javascript
import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom/client';
import axios from 'axios';
import './App.css';

const App = () => {
  // Define ALL state variables at the top
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [currentView, setCurrentView] = useState('main');
  
  // Group related form state
  const [formData, setFormData] = useState({
    field1: '',
    field2: ''
  });
```
**‚úì Checkpoint**: All imports at top, all state declared

---

**STEP 4: Data Fetching & API Calls** (Next 40-60 lines)
```javascript
  // useEffect hooks for data fetching
  useEffect(() => {
    fetchData();
  }, []);
  
  const fetchData = async () => {
    setLoading(true);
    setError(null);
    try {
      const response = await axios.get('/api/endpoint');
      setData(response.data);
    } catch (err) {
      setError(err.response?.data?.error || err.message);
      console.error('Fetch error:', err);
    } finally {
      setLoading(false);
    }
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      const response = await axios.post('/api/endpoint', formData);
      // Update state with response
      setData([...data, response.data]);
      // Reset form
      setFormData({ field1: '', field2: '' });
    } catch (err) {
      setError(err.response?.data?.error || err.message);
    } finally {
      setLoading(false);
    }
  };
```
**‚úì Checkpoint**: All API calls have loading/error handling

---

**STEP 5: Event Handlers** (Next 30-50 lines)
```javascript
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleDelete = async (id) => {
    if (!window.confirm('Are you sure?')) return;
    
    setLoading(true);
    try {
      await axios.delete(`/api/endpoint/${id}`);
      setData(data.filter(item => item.id !== id));
    } catch (err) {
      setError(err.response?.data?.error || err.message);
    } finally {
      setLoading(false);
    }
  };
  
  const navigateTo = (view) => {
    setCurrentView(view);
    setError(null);
  };
```
**‚úì Checkpoint**: All event handlers defined with proper error handling

---

**STEP 6: Render Components/Views** (Next 150-300 lines)
```javascript
  // Define view render functions
  const renderMainView = () => (
    <div className="main-view">
      <h2>Main View</h2>
      
      {loading && <p className="loading">Loading...</p>}
      {error && <p className="error">{error}</p>}
      
      <div className="content">
        {data.length === 0 ? (
          <p>No data available</p>
        ) : (
          data.map(item => (
            <div key={item.id} className="item-card">
              <h3>{item.title}</h3>
              <p>{item.description}</p>
              <button onClick={() => handleDelete(item.id)}>Delete</button>
            </div>
          ))
        )}
      </div>
    </div>
  );
  
  const renderFormView = () => (
    <div className="form-view">
      <h2>Add New Item</h2>
      
      {error && <p className="error">{error}</p>}
      
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="field1">Field 1:</label>
          <input
            id="field1"
            name="field1"
            type="text"
            value={formData.field1}
            onChange={handleInputChange}
            required
          />
        </div>
        
        <button type="submit" disabled={loading}>
          {loading ? 'Submitting...' : 'Submit'}
        </button>
      </form>
    </div>
  );
```
**‚úì Checkpoint**: Each view handles loading/error states, forms have validation

---

**STEP 7: Main Render** (Next 40-60 lines)
```javascript
  // Main component render
  return (
    <div className="app-container">
      <header>
        <h1>{{ name }}</h1>
        <nav>
          <button 
            onClick={() => navigateTo('main')}
            className={currentView === 'main' ? 'active' : ''}
          >
            Main
          </button>
          <button 
            onClick={() => navigateTo('form')}
            className={currentView === 'form' ? 'active' : ''}
          >
            Add New
          </button>
        </nav>
      </header>
      
      <main>
        {currentView === 'main' && renderMainView()}
        {currentView === 'form' && renderFormView()}
      </main>
      
      <footer>
        <p>¬© 2024 {{ name }}</p>
      </footer>
    </div>
  );
};
```
**‚úì Checkpoint**: Conditional rendering works, navigation functional

---

**STEP 8: React Root & Export** (Final 10-15 lines)
```javascript
// Mount React app
const container = document.getElementById('root');
if (container) {
  const root = ReactDOM.createRoot(container);
  root.render(<App />);
}

export default App;
```
**‚úì Checkpoint**: App mounts correctly to #root element

---

### **üéØ VALIDATION CHECKLIST** (Complete Before Submitting)

**File Structure:**
- [ ] package.json with all dependencies (react, react-dom, axios, vite)
- [ ] index.html with #root div and module script
- [ ] App.jsx with complete component logic
- [ ] App.css with comprehensive styling

**Code Structure:**
- [ ] All imports at top of App.jsx
- [ ] All useState hooks declared at component top
- [ ] All event handlers defined before render
- [ ] Proper component structure (no nested component definitions)

**Functionality:**
- [ ] Data fetching with loading/error states
- [ ] Form submissions with validation
- [ ] Conditional rendering for different views
- [ ] Navigation between views works
- [ ] All API calls use try/catch
- [ ] Proper key props on mapped elements

**User Experience:**
- [ ] Loading states shown during async operations
- [ ] Error messages displayed to user
- [ ] Forms disable submit during loading
- [ ] Input validation provides feedback
- [ ] Responsive design (basic mobile support)
- [ ] Accessibility basics (labels, semantic HTML)

**Code Quality:**
- [ ] No TODO or placeholder comments
- [ ] Event handlers prevent default when needed
- [ ] No hardcoded API URLs (use relative paths)
- [ ] Clean, readable code with consistent style

---

### **üö´ CONSTRAINTS & BOUNDARIES**

**DO:**
- ‚úÖ Write complete, functional React components
- ‚úÖ Use functional components with hooks (not class components)
- ‚úÖ Include loading and error states for all async operations
- ‚úÖ Use proper event handlers (e.preventDefault(), etc.)
- ‚úÖ Map arrays with unique key props
- ‚úÖ Use relative paths for API calls (/api/endpoint)

**DON'T:**
- ‚ùå Use `// TODO` or placeholder comments in final code
- ‚ùå Skip loading/error state handling
- ‚ùå Hardcode backend URLs (no http://localhost:5000)
- ‚ùå Create multiple versions of the same file
- ‚ùå Use class components or outdated patterns
- ‚ùå Add features beyond specified requirements

**CODE SIZE EXPECTATIONS:**
- **App.jsx Minimum**: 300 lines (anything less is incomplete)
- **App.jsx Target**: 400-600 lines (comprehensive implementation)
- **App.jsx Maximum**: 800 lines (don't over-engineer)
- **App.css**: 100-200 lines of styling

---

### **5. Output Specification (Answer Engineering)**

#### **Deliverables**

Generate the following four files. Do **not** generate a `Dockerfile` or `vite.config.js`.

1. **`package.json`**: Complete package configuration
2. **`index.html`**: HTML entry point
3. **`src/App.jsx`**: Complete React application implementing all requirements
4. **`src/App.css`**: Comprehensive styling

#### **Code Quality & Technical Mandates**

* **`App.jsx` Structure (Expand from this skeleton):**

```javascript
{{ scaffolding_app_jsx }}
```

* **`package.json` Base:**

```json
{{ scaffolding_package_json }}
```

* **`index.html` Base:**

```html
{{ scaffolding_index_html }}
```

* **`App.css` Base:**

```css
{{ scaffolding_app_css }}
```

* **Required Libraries:** React, ReactDOM, Axios, Vite
* **Build Tool:** Vite (port 5173 by default)
* **API Integration:** Use relative paths that will be proxied to backend
* **Responsive Design:** Must work on desktop and mobile devices

---

#### **Final Review (Self-Correction)**

After generating the code, perform a final internal review to ensure:
- All requirements are fully implemented
- Forms have proper validation and error handling
- UI is intuitive and user-friendly
- Code follows React best practices
- No placeholder or incomplete implementations
- App is ready to run with `npm run dev`

You may now begin.
