from app import create_app
from models import *
from extensions import db
import json
from pathlib import Path

def populate_all_models():
    app = create_app()
    
    with app.app_context():
        print("Loading model capabilities from JSON...")
        
        # Load the model capabilities JSON
        project_root = Path(__file__).parent.parent
        capabilities_file = project_root / "misc" / "model_capabilities.json"
        
        with open(capabilities_file) as f:
            capabilities_data = json.load(f)
        
        # Navigate to the models section
        models_data = capabilities_data['models']
        
        # Get all model IDs (exclude metadata keys)
        model_ids = [key for key in models_data.keys() 
                    if key not in ['metadata', 'capabilities_summary', 'models'] 
                    and isinstance(models_data[key], dict) 
                    and models_data[key].get('model_id')]
        
        print(f"Found {len(model_ids)} models to process")
        
        # Clear existing data
        print("Clearing existing model data...")
        ModelCapability.query.delete()
        GeneratedApplication.query.delete()
        
        models_created = 0
        apps_created = 0
        
        for model_id in model_ids:
            model_data = models_data[model_id]
            
            try:
                print(f"Processing model: {model_id}")
                
                # Create ModelCapability entry
                model_capability = ModelCapability(
                    model_id=model_data.get('model_id'),
                    canonical_slug=model_data.get('canonical_slug', model_id.replace('/', '_')),
                    provider=model_data.get('provider', 'unknown'),
                    model_name=model_data.get('model_name', model_id),
                    is_free=model_data.get('is_free', False),
                    context_window=model_data.get('context_window', 0),
                    max_output_tokens=model_data.get('max_output_tokens', 0),
                    supports_function_calling=model_data.get('supports_function_calling', False),
                    supports_vision=model_data.get('supports_vision', False),
                    supports_streaming=model_data.get('supports_streaming', True),
                    supports_json_mode=model_data.get('supports_json_mode', False),
                    input_price_per_token=float(model_data.get('pricing', {}).get('prompt_tokens', 0) or 0),
                    output_price_per_token=float(model_data.get('pricing', {}).get('completion_tokens', 0) or 0),
                    cost_efficiency=model_data.get('performance_metrics', {}).get('cost_efficiency', 0.0),
                    safety_score=model_data.get('quality_metrics', {}).get('safety', 0.0),
                    capabilities_json=json.dumps(model_data.get('capabilities', {})),
                    metadata_json=json.dumps({
                        'description': model_data.get('description', ''),
                        'architecture': model_data.get('architecture', {}),
                        'quality_metrics': model_data.get('quality_metrics', {}),
                        'performance_metrics': model_data.get('performance_metrics', {}),
                        'last_updated': model_data.get('last_updated', '')
                    })
                )
                
                db.session.add(model_capability)
                models_created += 1
                
                # Create a sample GeneratedApplication for the first app
                canonical_slug = model_data.get('canonical_slug', model_id.replace('/', '_'))
                app_entry = GeneratedApplication(
                    model_slug=canonical_slug,
                    app_number=1,
                    app_type="login_system",
                    provider=model_data.get('provider', 'unknown'),
                    generation_status="completed",
                    has_backend=True,
                    has_frontend=True,
                    has_docker_compose=True,
                    backend_framework="Flask",
                    frontend_framework="React",
                    container_status="stopped",
                    metadata_json=json.dumps({
                        "description": f"Login system application generated by {model_id}",
                        "features": ["authentication", "user management"],
                        "model_used": model_id
                    })
                )
                
                db.session.add(app_entry)
                apps_created += 1
                
            except Exception as e:
                print(f"Error processing model {model_id}: {e}")
                continue
        
        # Commit all changes
        print("Committing database changes...")
        db.session.commit()
        
        # Verify the data
        model_count = ModelCapability.query.count()
        app_count = GeneratedApplication.query.count()
        
        print(f"Database populated successfully!")
        print(f"ModelCapability count: {model_count}")
        print(f"GeneratedApplication count: {app_count}")
        print(f"Models created: {models_created}")
        print(f"Apps created: {apps_created}")
        
        # Show sample data
        print("\nSample models:")
        for model in ModelCapability.query.limit(5).all():
            print(f"  {model.model_id} ({model.provider})")

if __name__ == "__main__":
    populate_all_models()
